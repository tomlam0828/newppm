{"version":3,"sources":["actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Project/CreateProjectButton.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/Layout/Header.js","components/Project/AddProject.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","components/Project/UpdateProject.js","components/ProjectBoard/ProjectTasks/ProjectTask.js","actions/backlogActions.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTasks/AddProjectTask.js","components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","components/Layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecuredRoute.js","App.js","serviceWorker.js","index.js"],"names":["createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","ProjectItem","onDelete","id","props","deleteProject","this","className","projectIdentifier","projectName","description","to","onClick","bind","Component","connect","window","confirm","delete","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","state","get","res","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsAuthenticated","fullName","userIsNotAuthenticated","data-toggle","data-target","AddProject","start_date","end_date","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProject","classnames","placeholder","initialState","project_tasks","project_task","booleanActionPayload","combineReducers","action","filter","backlog","projectSequence","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","match","params","getProject","updateProject","disabled","ProjectTask","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","onDeleteClick","Backlog","tasks","todoItems","inProgressItems","doneItems","i","length","status","ProjectBoard","getBacklog","BoardContent","projectNotFound","role","boardAlgo","AddProjectTask","dueDate","newTask","addProjectTask","UpdateProjectTask","create_At","update_At","getProjectTask","updateProjectTask","patch","Landing","Register","username","password","confirmPassword","newUser","createNewUser","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","render","jwtToken","decode_jwtToken","currentTime","Date","now","exp","App","exact","path","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wVAGaA,EAAgB,SAACC,EAASC,GAAV,8CAAsB,WAAMC,GAAN,SAAAC,EAAA,+EAErCC,IAAMC,KAAK,eAAgBL,GAFU,OAG3CC,EAAQK,KAAK,cACbJ,EAAS,CACLK,KCRc,aDSdC,QAAS,KAN8B,gDAU3CN,EAAS,CACLK,KCdc,aDedC,QAAS,KAAMC,SAASC,OAZe,yDAAtB,uDEGvBC,E,4MAEJC,SAAW,SAAAC,GACT,EAAKC,MAAMC,cAAcF,I,uDAGjB,IACAb,EAAYgB,KAAKF,MAAjBd,QACR,OACE,yBAAKiB,UAAU,aACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,WAAWjB,EAAQkB,oBAErC,yBAAKD,UAAU,2BACb,4BAAKjB,EAAQmB,aACb,2BAAInB,EAAQoB,cAEd,yBAAKH,UAAU,8BACb,wBAAIA,UAAU,cACZ,kBAAC,IAAD,CAAMI,GAAE,wBAAmBrB,EAAQkB,oBACjC,wBAAID,UAAU,yBACZ,uBAAGA,UAAU,6BAAb,qBAGJ,kBAAC,IAAD,CAAMI,GAAE,yBAAoBrB,EAAQkB,oBAClC,wBAAID,UAAU,0BACZ,uBAAGA,UAAU,mBAAb,0BAGJ,wBAAIA,UAAU,yBAAyBK,QAASN,KAAKJ,SAASW,KAAKP,KAAMhB,EAAQkB,oBAC/E,uBAAGD,UAAU,2BAAb,6B,GAhCQO,aA+CXC,cAAQ,KAAM,CAAEV,cFbF,SAAAF,GAAE,8CAAI,WAAMX,GAAN,SAAAC,EAAA,0DAC3BuB,OAAOC,QAAQ,6BADY,gCAErBvB,IAAMwB,OAAN,uBAA6Bf,IAFR,OAG3BX,EAAS,CACLK,KCzCkB,iBD0ClBC,QAASK,IALc,2CAAJ,wDEahBY,CAAiCd,GCxCjCkB,EAVa,WACxB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAMT,GAAG,cAAcJ,UAAU,uBAAjC,sBCCNc,E,kLAGEf,KAAKF,MAAMkB,gB,+BAGL,IAEEC,EAAajB,KAAKF,MAAMd,QAAxBiC,SAER,OACI,yBAAKhB,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAd,YACA,6BACA,kBAAC,EAAD,MACA,6BACA,6BACCgB,EAASC,KAAI,SAAAlC,GAAO,OACjB,kBAAC,EAAD,CAAamC,IAAKnC,EAAQa,GAAIb,QAASA,e,GArB/CwB,aAwCTC,eAJS,SAAAW,GAAK,MAAK,CAC9BpC,QAASoC,EAAMpC,WAGqB,CAAEgC,YJ3Bf,yDAAM,WAAM9B,GAAN,eAAAC,EAAA,sEACXC,IAAMiC,IAAI,oBADC,OACvBC,EADuB,OAE7BpC,EAAS,CACLK,KCtBoB,eDuBpBC,QAAS8B,EAAI5B,OAJY,2CAAN,wDI2BZe,CAA0CM,GCrC1CQ,EARK,SAAAC,GACZA,EACApC,IAAMqC,SAASC,QAAQC,OAAvB,cAAiDH,SAE1CpC,IAAMqC,SAASC,QAAQC,OAAvB,e,iBCwCFC,EAAS,kBAAM,SAAA1C,GACxB2C,aAAaC,WAAW,YAExBP,GAAY,GAEZrC,EAAS,CACLK,KLzCwB,mBK0CxBC,QAAS,OC/CXuC,E,uKAGE/B,KAAKF,MAAM8B,SACXlB,OAAOsB,SAASC,KAAO,M,+BAGjB,IA6CFC,EA7CC,EAEwBlC,KAAKF,MAAMqC,SAAhCC,EAFH,EAEGA,WAAYC,EAFf,EAEeA,KAEdC,EACF,yBAAKrC,UAAU,2BAA2BJ,GAAG,cACzC,wBAAII,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,cAA9B,eAKR,wBAAIJ,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,cAC1B,uBAAGJ,UAAU,2BAAb,IAAyCoC,EAAKE,YAGtD,wBAAItC,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,UAAUC,QAASN,KAAK4B,OAAOrB,KAAKP,OAAlE,aAQVwC,EACF,yBAAKvC,UAAU,2BAA2BJ,GAAG,cACzC,wBAAII,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,aAA9B,YAIJ,wBAAIJ,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,UAA9B,YAgBhB,OALI6B,EADAE,GAAcC,EACAC,EAEAE,EAId,yBAAKvC,UAAU,uDACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMA,UAAU,eAAeI,GAAG,KAAlC,oCAGA,4BAAQJ,UAAU,iBAAiBV,KAAK,SAASkD,cAAY,WAAWC,cAAY,eAChF,0BAAMzC,UAAU,yBAEnBiC,Q,GArEA1B,aAqFNC,eAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGoB,CAAEP,UAA3BnB,CAAqCsB,G,gDCrF9CY,E,kDACF,aAAe,IAAD,8BACV,gBAEKvB,MAAQ,CACTjB,YAAa,GACbD,kBAAmB,GACnBE,YAAa,GACbwC,WAAY,GACZC,SAAU,GACVC,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAZN,E,sEAgBY0C,GAClBA,EAAUH,QACV9C,KAAKkD,SAAS,CACVJ,OAAQG,EAAUH,W,+BAKrBK,GACLnD,KAAKkD,SAAL,eAESC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAK7BH,GACLA,EAAEI,iBACF,IAAMC,EAAa,CACfrD,YAAaH,KAAKoB,MAAMjB,YACxBD,kBAAmBF,KAAKoB,MAAMlB,kBAC9BE,YAAaJ,KAAKoB,MAAMhB,YACxBwC,WAAY5C,KAAKoB,MAAMwB,WACvBC,SAAU7C,KAAKoB,MAAMyB,UAEzB7C,KAAKF,MAAMf,cAAcyE,EAAYxD,KAAKF,MAAMb,W,+BAG1C,IACE6D,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,6BACI,yBAAK7C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,uBACA,6BACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO3C,cAEzBuD,YAAY,eACZL,KAAK,cACLC,MAAOtD,KAAKoB,MAAMjB,YAClB4C,SAAU/C,KAAK+C,WAElBD,EAAO3C,aACJ,yBAAKF,UAAU,oBAAoB6C,EAAO3C,cAGlD,yBAAKF,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO5C,oBAEzBwD,YAAY,oBACZL,KAAK,oBACLC,MAAOtD,KAAKoB,MAAMlB,kBAClB6C,SAAU/C,KAAK+C,WAElBD,EAAO5C,mBACJ,yBAAKD,UAAU,oBAAoB6C,EAAO5C,oBAGlD,yBAAKD,UAAU,cACX,8BACIA,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO1C,cAEzBsD,YAAY,sBACZL,KAAK,cACLC,MAAOtD,KAAKoB,MAAMhB,YAClB2C,SAAU/C,KAAK+C,WAElBD,EAAO1C,aACJ,yBAAKH,UAAU,oBAAoB6C,EAAO1C,cAGlD,0CACA,yBAAKH,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,aACLC,MAAOtD,KAAKoB,MAAMwB,WAClBG,SAAU/C,KAAK+C,YAGvB,kDACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMyB,SAClBE,SAAU/C,KAAK+C,YAGvB,2BAAOxD,KAAK,SAASU,UAAU,6C,GAxH1CO,aA4IVC,eAJS,SAAAW,GAAK,MAAK,CAC9B0B,OAAQ1B,EAAM0B,UAGsB,CAAE/D,iBAA3B0B,CAA4CkC,G,gBChJrDgB,EAAe,G,QCAfA,EAAe,CACjB1C,SAAU,GACVjC,QAAS,ICFP2E,EAAe,CACjBC,cAAe,GACfC,aAAc,ICFZF,EAAe,CACjBtB,KAAM,GACND,YAAY,GAGV0B,EAAuB,SAACtE,GAC1B,QAAIA,GCFOuE,cAAgB,CAC3BjB,OJHW,WAAyC,IAA/B1B,EAA8B,uDAAtBuC,EAAcK,EAAQ,uCACnD,OAAQA,EAAOzE,MACX,IRNkB,aQOd,OAAOyE,EAAOxE,QAElB,QACI,OAAO4B,IIFfpC,QHDW,WAAyC,IAA/BoC,EAA8B,uDAAtBuC,EAAcK,EAAQ,uCACnD,OAAQA,EAAOzE,MACX,ITRoB,eSShB,OAAO,2BACA6B,GADP,IAEIH,SAAU+C,EAAOxE,UAGzB,ITbmB,cScf,OAAO,2BACA4B,GADP,IAEIpC,QAASgF,EAAOxE,UAGxB,ITlBsB,iBSmBlB,OAAO,2BACA4B,GADP,IAEIH,SAAUG,EAAMH,SAASgD,QACrB,SAAAjF,GAAO,OAAIA,EAAQkB,oBAAsB8D,EAAOxE,aAI5D,QACI,OAAO4B,IGrBf8C,QFFW,WAAyC,IAA/B9C,EAA8B,uDAAtBuC,EAAcK,EAAQ,uCACnD,OAAQA,EAAOzE,MAEX,IVHmB,cUIf,OAAO,2BACA6B,GADP,IAEIwC,cAAeI,EAAOxE,UAG9B,IVRwB,mBUSpB,OAAO,2BACA4B,GADP,IAEIyC,aAAcG,EAAOxE,UAG7B,IVb2B,sBUcvB,OAAO,2BACA4B,GADP,IAEIwC,cAAexC,EAAMwC,cAAcK,QAAO,SAAAjF,GAAO,OAAIA,EAAQmF,kBAAoBH,EAAOxE,aAGhG,QACI,OAAO4B,IEnBfe,SDKW,WAAyC,IAA/Bf,EAA8B,uDAAtBuC,EAAcK,EAAQ,uCACnD,OAAQA,EAAOzE,MACX,IXNwB,mBWOpB,OAAO,2BACA6B,GADP,IAEIgB,WAAY0B,EAAqBE,EAAOxE,SACxC6C,KAAM2B,EAAOxE,UAGrB,QACI,OAAO4B,MErBbuC,EAAe,GACfS,EAAa,CAACC,KAIdC,EAAqB5D,OAAO6D,8BAAgC7D,OAAO6D,+BAc1DC,EAZX9D,OAAO+D,UAAUC,UAAUC,SAAS,WAAaL,EACzCM,YAAYC,EAAalB,EAAcmB,YAC3CC,IAAe,WAAf,EAAmBX,GACnBE,IAIIM,YAAYC,EAAalB,EAAcmB,YAC3CC,IAAe,WAAf,EAAmBX,KCbrBY,E,kDAEF,aAAe,IAAD,8BACV,gBAEK5D,MAAQ,CACTvB,GAAI,GACJM,YAAa,GACbD,kBAAmB,KACnBE,YAAa,GACbwC,WAAY,GACZC,SAAU,GACVC,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAbN,E,sEAgBY0C,GAClBA,EAAUH,QACV9C,KAAKkD,SAAS,CAAEJ,OAAQG,EAAUH,SAFL,MAW7BG,EAAUjE,QANVa,EAL6B,EAK7BA,GACAM,EAN6B,EAM7BA,YACAD,EAP6B,EAO7BA,kBACAE,EAR6B,EAQ7BA,YACAwC,EAT6B,EAS7BA,WACAC,EAV6B,EAU7BA,SAGJ7C,KAAKkD,SAAS,CACVrD,KACAM,cACAD,oBACAE,cACAwC,aACAC,e,0CAIa,IACThD,EAAOG,KAAKF,MAAMmF,MAAMC,OAAxBrF,GACRG,KAAKF,MAAMqF,WAAWtF,EAAIG,KAAKF,MAAMb,W,+BAGhCkE,GACLnD,KAAKkD,SAAL,eAAiBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGrCH,GACLA,EAAEI,iBAEF,IAAM6B,EAAgB,CAClBvF,GAAIG,KAAKoB,MAAMvB,GACfM,YAAaH,KAAKoB,MAAMjB,YACxBD,kBAAmBF,KAAKoB,MAAMlB,kBAC9BE,YAAaJ,KAAKoB,MAAMhB,YACxBwC,WAAY5C,KAAKoB,MAAMwB,WACvBC,SAAU7C,KAAKoB,MAAMyB,UAGzB7C,KAAKF,MAAMf,cAAcqG,EAAepF,KAAKF,MAAMb,W,+BAG7C,IACE6D,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,yBAAK7C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,uBACA,6BACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO3C,cAEzBuD,YAAY,eACZL,KAAK,cACLC,MAAOtD,KAAKoB,MAAMjB,aAAe,GACjC4C,SAAU/C,KAAK+C,WAElBD,EAAO3C,aACJ,yBAAKF,UAAU,oBAAoB6C,EAAO3C,cAGlD,yBAAKF,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVyD,YAAY,oBACZL,KAAK,oBACLC,MAAOtD,KAAKoB,MAAMlB,mBAAqB,GACvC6C,SAAU/C,KAAK+C,SACfsC,UAAQ,KAGhB,yBAAKpF,UAAU,cACX,8BACIA,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO1C,cAEzBsD,YAAY,sBACZL,KAAK,cACLN,SAAU/C,KAAK+C,SACfO,MAAOtD,KAAKoB,MAAMhB,aAAe,KAEpC0C,EAAO1C,aACJ,yBAAKH,UAAU,oBAAoB6C,EAAO1C,cAGlD,0CACA,yBAAKH,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,aACLC,MAAOtD,KAAKoB,MAAMwB,YAAc,GAChCG,SAAU/C,KAAK+C,YAGvB,kDACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMyB,UAAY,GAC9BE,SAAU/C,KAAK+C,YAIvB,2BACIxD,KAAK,SACLU,UAAU,4C,GA1IlBO,aAiKbC,eALS,SAAAW,GAAK,MAAK,CAC9BpC,QAASoC,EAAMpC,QAAQA,QACvB8D,OAAQ1B,EAAM0B,UAKd,CAAEqC,Wf7IoB,SAACtF,EAAIZ,GAAL,8CAAiB,WAAMC,GAAN,eAAAC,EAAA,+EAEjBC,IAAMiC,IAAN,uBAA0BxB,IAFT,OAE7ByB,EAF6B,OAGnCpC,EAAS,CACLK,KC9Be,cD+BfC,QAAS8B,EAAI5B,OALkB,gDAQnCT,EAAQK,KAAK,cARsB,yDAAjB,uDe6IRP,iBAFH0B,CAGbuE,GCpKIM,E,4KAEYC,EAAYC,GACtBxF,KAAKF,MAAM2F,kBAAkBF,EAAYC,K,+BAGnC,IAEFE,EACAC,EAFI9B,EAAiB7D,KAAKF,MAAtB+D,aAmBR,OAf8B,IAA1BA,EAAa+B,WACbD,EAAgB,uBAChBD,EAAiB,QAGS,IAA1B7B,EAAa+B,WACbD,EAAgB,wBAChBD,EAAiB,UAGS,IAA1B7B,EAAa+B,WACbD,EAAgB,qBAChBD,EAAiB,OAIjB,yBAAKzF,UAAU,sBACX,yBAAKA,UAAS,mCAA8B0F,IAA5C,OACS9B,EAAaM,gBADtB,iBACqDuB,GAGrD,yBAAKzF,UAAU,sBACX,wBAAIA,UAAU,cAAc4D,EAAagC,SACzC,uBAAG5F,UAAU,4BACR4D,EAAaiC,oBAElB,kBAAC,IAAD,CAAMzF,GAAE,6BAAwBwD,EAAa3D,kBAArC,YAA0D2D,EAAaM,iBAAmBlE,UAAU,mBAA5G,iBAGA,4BACIA,UAAU,sBACVK,QAASN,KAAK+F,cAAcxF,KAAKP,KAAM6D,EAAa3D,kBAAmB2D,EAAaM,kBAFxF,gB,GAxCM3D,aAuDXC,cAAQ,KAAM,CAAEgF,kBCGE,SAACF,EAAYC,GAAb,8CAAuB,WAAMtG,GAAN,SAAAC,EAAA,0DAChDuB,OAAOC,QAAP,gCAAwC6E,EAAxC,cADgD,gCAE1CpG,IAAMwB,OAAN,uBAA6B2E,EAA7B,YAA2CC,IAFD,OAGhDtG,EAAS,CACLK,KhB3DuB,sBgB4DvBC,QAASgG,IALmC,2CAAvB,wDDHlB/E,CAAqC6E,GEKrCU,G,uKAjDP,IAbM,IAGAC,EAFoBjG,KAAKF,MAAvB8D,cAEoB1C,KAAI,SAAAlC,GAAO,OACnC,kBAAC,EAAD,CAAamC,IAAKnC,EAAQa,GAAIgE,aAAc7E,OAG5CkH,EAAY,GAEZC,EAAkB,GAElBC,EAAY,GAEPC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IACa,UAAvCJ,EAAMI,GAAGvG,MAAM+D,aAAa0C,QAC5BL,EAAU5G,KAAK2G,EAAMI,IAGkB,gBAAvCJ,EAAMI,GAAGvG,MAAM+D,aAAa0C,QAC5BJ,EAAgB7G,KAAK2G,EAAMI,IAGY,SAAvCJ,EAAMI,GAAGvG,MAAM+D,aAAa0C,QAC5BH,EAAU9G,KAAK2G,EAAMI,IAI7B,OACI,yBAAKpG,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,uCACX,uCAGPiG,GAGL,yBAAKjG,UAAU,YACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,qCACX,6CAGPkG,GAGL,yBAAKlG,UAAU,YACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,qCACX,sCAGPmG,S,GAvDH5F,aCIhBgG,G,kDAEF,aAAe,IAAD,8BACV,gBACKpF,MAAQ,CACT0B,OAAQ,IAHF,E,gEAOO,IACTjD,EAAOG,KAAKF,MAAMmF,MAAMC,OAAxBrF,GACRG,KAAKF,MAAM2G,WAAW5G,K,gDAGAoD,GAClBA,EAAUH,QACV9C,KAAKkD,SAAS,CACVJ,OAAQG,EAAUH,W,+BAKpB,IAKF4D,EAJI7G,EAAOG,KAAKF,MAAMmF,MAAMC,OAAxBrF,GACA+D,EAAkB5D,KAAKF,MAAMoE,QAA7BN,cAiCR,OAFA8C,EA1BkB,SAAC5D,EAAQc,GACvB,OAAIA,EAAc0C,OAAS,EACnBxD,EAAO6D,gBAEH,yBAAK1G,UAAU,iCAAiC2G,KAAK,SAChD9D,EAAO6D,iBAGT7D,EAAO5C,kBAEV,yBAAKD,UAAU,iCAAiC2G,KAAK,SAChD9D,EAAO5C,mBAKZ,yBAAKD,UAAU,+BAA+B2G,KAAK,SAAnD,mCAMD,kBAAC,GAAD,CAAShD,cAAeA,IAIxBiD,CA9BI7G,KAAKoB,MAAhB0B,OA8ByBc,GAG7B,yBAAK3D,UAAU,aACX,kBAAC,IAAD,CAAMI,GAAE,0BAAqBR,GAAMI,UAAU,wBACzC,uBAAGA,UAAU,sBAAb,yBAEJ,6BACA,6BACCyG,O,GAhEUlG,aAkFZC,gBALS,SAAAW,GAAK,MAAK,CAC9B8C,QAAS9C,EAAM8C,QACfpB,OAAQ1B,EAAM0B,UAGsB,CAAE2D,WFpEhB,SAAAlB,GAAU,8CAAI,WAAMrG,GAAN,eAAAC,EAAA,+EAEdC,IAAMiC,IAAN,uBAA0BkE,IAFZ,OAE1BjE,EAF0B,OAGhCpC,EAAS,CACLK,KhBlBe,cgBmBfC,QAAS8B,EAAI5B,OALe,gDAQhCR,EAAS,CACLK,KhB9Bc,agB+BdC,QAAS,KAAMC,SAASC,OAVI,yDAAJ,wDEoErBe,CAAyC+F,IClFlDM,G,kDACF,WAAYhH,GAAQ,IAAD,0BAGPD,GAFR,cAAMC,IAEcA,MAAMmF,MAAMC,OAAxBrF,GAHO,OAKf,EAAKuB,MAAQ,CACTyE,QAAS,GACTC,mBAAoB,GACpBF,SAAU,EACVmB,QAAS,KACTR,OAAQ,GACRrG,kBAAmBL,EACnBiD,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAfD,E,sEAkBO0C,GAClBA,EAAUH,QACV9C,KAAKkD,SAAS,CACVJ,OAAQG,EAAUH,W,+BAKrBK,GACLnD,KAAKkD,SAAL,eACKC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAIzBH,GACLA,EAAEI,iBACF,IAAMyD,EAAU,CACZnB,QAAS7F,KAAKoB,MAAMyE,QACpBC,mBAAoB9F,KAAKoB,MAAM0E,mBAC/BF,SAAU5F,KAAKoB,MAAMwE,SACrBmB,QAAS/G,KAAKoB,MAAM2F,QACpBR,OAAQvG,KAAKoB,MAAMmF,QAEvBvG,KAAKF,MAAMmH,eAAejH,KAAKoB,MAAMlB,kBAAmB8G,EAAShH,KAAKF,MAAMb,W,+BAGtE,IACEY,EAAOG,KAAKF,MAAMmF,MAAMC,OAAxBrF,GACAiD,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,yBAAK7C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAMI,GAAE,wBAAmBR,GAAMI,UAAU,iBAA3C,yBAGA,wBAAIA,UAAU,yBAAd,oBACA,uBAAGA,UAAU,oBAAb,+BACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BAAOV,KAAK,OACRU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO+C,UAEzBxC,KAAK,UACLK,YAAY,uBACZJ,MAAOtD,KAAKoB,MAAMyE,SAAW,GAC7B9C,SAAU/C,KAAK+C,WAClBD,EAAO+C,SACJ,yBAAK5F,UAAU,oBAAoB6C,EAAO+C,UAGlD,yBAAK5F,UAAU,cACX,8BACIA,UAAU,+BACVyD,YAAY,sBAAsBL,KAAK,qBACvCC,MAAOtD,KAAKoB,MAAM0E,oBAAsB,GACxC/C,SAAU/C,KAAK+C,YAEvB,wCACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,UACLC,MAAOtD,KAAKoB,MAAM2F,SAAW,GAC7BhE,SAAU/C,KAAK+C,YAEvB,yBAAK9C,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMwE,UAAY,GAC9B7C,SAAU/C,KAAK+C,UACf,4BAAQO,MAAO,GAAf,mBACA,4BAAQA,MAAO,GAAf,QACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,SAIR,yBAAKrD,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,SACLC,MAAOtD,KAAKoB,MAAMmF,QAAU,GAC5BxD,SAAU/C,KAAK+C,UACf,4BAAQO,MAAM,IAAd,iBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,UAIR,2BAAO/D,KAAK,SAASU,UAAU,4C,GAlHlCO,aAqIdC,gBAJS,SAAAW,GAAK,MAAK,CAC9B0B,OAAQ1B,EAAM0B,UAGsB,CAAEmE,eHzIZ,SAAC1B,EAAY1B,EAAc5E,GAA3B,8CAAuC,WAAMC,GAAN,SAAAC,EAAA,+EAEvDC,IAAMC,KAAN,uBAA2BkG,GAAc1B,GAFc,OAI7D5E,EAAQK,KAAR,wBAA8BiG,IAE9BrG,EAAS,CACLK,KhBVc,agBWdC,QAAS,KARgD,gDAW7DN,EAAS,CACLK,KhBfc,agBgBdC,QAAS,KAAMC,SAASC,OAbiC,yDAAvC,wDGyIfe,CAA6CqG,ICrItDI,G,kDAEF,aAAe,IAAD,8BACV,gBACK9F,MAAQ,CACTvB,GAAI,GACJsE,gBAAiB,GACjB0B,QAAS,GACTC,mBAAoB,GACpBF,SAAU,GACVmB,QAAS,GACT7G,kBAAmB,GACnBiH,UAAW,GACXC,UAAW,GACXb,OAAQ,GACRzD,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAhBN,E,gEAmBO,IAAD,EACcP,KAAKF,MAAMmF,MAAMC,OAAvCK,EADQ,EACRA,WAAYC,EADJ,EACIA,MACpBxF,KAAKF,MAAMuH,eAAe9B,EAAYC,EAAOxF,KAAKF,MAAMb,W,gDAGlCgE,GAClBA,EAAUH,QACV9C,KAAKkD,SAAS,CACVJ,OAAQG,EAAUH,SAHO,MAkB7BG,EAAUY,aAVVhE,EAR6B,EAQ7BA,GACAsE,EAT6B,EAS7BA,gBACA0B,EAV6B,EAU7BA,QACAC,EAX6B,EAW7BA,mBACAF,EAZ6B,EAY7BA,SACAmB,EAb6B,EAa7BA,QACA7G,EAd6B,EAc7BA,kBACAiH,EAf6B,EAe7BA,UACAC,EAhB6B,EAgB7BA,UACAb,EAjB6B,EAiB7BA,OAEJvG,KAAKkD,SAAS,CACVrD,KACAsE,kBACA0B,UACAC,qBACAF,WACAmB,UACA7G,oBACAiH,YACAC,YACAb,a,+BAICpD,GACLnD,KAAKkD,SAAL,eAAiBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGrCH,GACLA,EAAEI,iBACF,IAAM2D,EAAoB,CACtBrH,GAAIG,KAAKoB,MAAMvB,GACfsE,gBAAiBnE,KAAKoB,MAAM+C,gBAC5B0B,QAAS7F,KAAKoB,MAAMyE,QACpBC,mBAAoB9F,KAAKoB,MAAM0E,mBAC/BF,SAAU5F,KAAKoB,MAAMwE,SACrBmB,QAAS/G,KAAKoB,MAAM2F,QACpB7G,kBAAmBF,KAAKoB,MAAMlB,kBAC9BiH,UAAWnH,KAAKoB,MAAM+F,UACtBC,UAAWpH,KAAKoB,MAAMgG,UACtBb,OAAQvG,KAAKoB,MAAMmF,QAGvBvG,KAAKF,MAAMwH,kBAAkBtH,KAAKoB,MAAMlB,kBAAmBF,KAAKoB,MAAM+C,gBAAiB+C,EAAmBlH,KAAKF,MAAMb,W,+BAG/G,IACE6D,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,yBAAK7C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAMI,GAAE,wBAAmBL,KAAKoB,MAAMlB,mBAAqBD,UAAU,iBAArE,yBAGA,wBAAIA,UAAU,yBAAd,uBACA,uBAAGA,UAAU,oBAAb,iBAA+CD,KAAKoB,MAAMlB,kBAA1D,uBAAiGF,KAAKoB,MAAM+C,iBAC5G,0BAAMnB,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO+C,UAEzBxC,KAAK,UACLK,YAAY,uBACZJ,MAAOtD,KAAKoB,MAAMyE,SAAW,GAC7B9C,SAAU/C,KAAK+C,WAGfD,EAAO+C,SACH,yBAAK5F,UAAU,oBAAoB6C,EAAO+C,UAItD,yBAAK5F,UAAU,cACX,8BACIA,UAAU,+BACVyD,YAAY,sBACZL,KAAK,qBACLC,MAAOtD,KAAKoB,MAAM0E,oBAAsB,GACxC/C,SAAU/C,KAAK+C,YAGvB,wCACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,UACLC,MAAOtD,KAAKoB,MAAM2F,SAAW,GAC7BhE,SAAU/C,KAAK+C,YAGvB,yBAAK9C,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMwE,UAAY,GAC9B7C,SAAU/C,KAAK+C,UAEf,4BAAQO,MAAO,GAAf,mBACA,4BAAQA,MAAO,GAAf,QACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,SAIR,yBAAKrD,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,SACLC,MAAOtD,KAAKoB,MAAMmF,QAAU,GAC5BxD,SAAU/C,KAAK+C,UAEf,4BAAQO,MAAM,IAAd,iBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,UAIR,2BAAO/D,KAAK,SAASU,UAAU,4C,GA9J/BO,aAoLjBC,gBALS,SAAAW,GAAK,MAAK,CAC9ByC,aAAczC,EAAM8C,QAAQL,aAC5Bf,OAAQ1B,EAAM0B,UAGsB,CAAEuE,eJvJZ,SAAC9B,EAAYC,EAAOvG,GAApB,8CAAgC,WAAMC,GAAN,eAAAC,EAAA,+EAEpCC,IAAMiC,IAAN,uBAA0BkE,EAA1B,YAAwCC,IAFJ,OAEhDlE,EAFgD,OAGtDpC,EAAS,CACLK,KhBhCoB,mBgBiCpBC,QAAS8B,EAAI5B,OALqC,gDAQtDT,EAAQK,KAAK,cARyC,yDAAhC,uDIuJ4BgI,kBJ3IzB,SAAC/B,EAAYC,EAAO3B,EAAc5E,GAAlC,8CAA8C,WAAMC,GAAN,SAAAC,EAAA,+EAEjEC,IAAMmI,MAAN,uBAA4BhC,EAA5B,YAA0CC,GAAS3B,GAFc,OAGvE5E,EAAQK,KAAR,wBAA8BiG,IAC9BrG,EAAS,CACLK,KhBrDc,agBsDdC,QAAS,KAN0D,gDASvEN,EAAS,CACLK,KhB1Dc,agB2DdC,QAAS,KAAMC,SAASC,OAX2C,yDAA9C,wDI2IlBe,CAAgEyG,ICtLzEM,G,kLAGMxH,KAAKF,MAAMqC,SAASC,YACpBpC,KAAKF,MAAMb,QAAQK,KAAK,gB,+BAK5B,OACI,yBAAKW,UAAU,WACX,yBAAKA,UAAU,yCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,kBAAd,yBACA,uBAAGA,UAAU,QAAb,iEAGA,6BACA,kBAAC,IAAD,CAAMA,UAAU,8BAA8BI,GAAG,aAAjD,WAGA,kBAAC,IAAD,CAAMA,GAAG,SAASJ,UAAU,iCAA5B,kB,GAvBVO,aA2CPC,gBAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGL1B,CAAyB+G,IC1ClCC,G,kDACF,aAAe,IAAD,8BACV,gBAEKrG,MAAQ,CACTsG,SAAU,GACVnF,SAAU,GACVoF,SAAU,GACVC,gBAAiB,GACjB9E,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAXN,E,sEAcY0C,GAClBA,EAAUH,QACV9C,KAAKkD,SAAS,CAAEJ,OAAQG,EAAUH,W,0CAKlC9C,KAAKF,MAAMqC,SAASC,YACpBpC,KAAKF,MAAMb,QAAQK,KAAK,gB,+BAIvB6D,GACLA,EAAEI,iBACF,IAAMsE,EAAU,CACZH,SAAU1H,KAAKoB,MAAMsG,SACrBnF,SAAUvC,KAAKoB,MAAMmB,SACrBoF,SAAU3H,KAAKoB,MAAMuG,SACrBC,gBAAiB5H,KAAKoB,MAAMwG,iBAEhC5H,KAAKF,MAAMgI,cAAcD,EAAS7H,KAAKF,MAAMb,W,+BAGxCkE,GACLnD,KAAKkD,SAAL,eAAiBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGpC,IACER,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,yBAAK7C,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,WACA,uBAAGA,UAAU,oBAAb,uBACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAOP,WAEzBmB,YAAY,YACZL,KAAK,WACLC,MAAOtD,KAAKoB,MAAMmB,SAClBQ,SAAU/C,KAAK+C,WAElBD,EAAOP,UACJ,yBAAKtC,UAAU,oBAAoB6C,EAAOP,WAGlD,yBAAKtC,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO4E,WAEzBhE,YAAY,2BACZL,KAAK,WACLC,MAAOtD,KAAKoB,MAAMsG,SAClB3E,SAAU/C,KAAK+C,WAElBD,EAAO4E,UACJ,yBAAKzH,UAAU,oBAAoB6C,EAAO4E,WAGlD,yBAAKzH,UAAU,cACX,2BACIV,KAAK,WACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO6E,WAEzBjE,YAAY,WACZL,KAAK,WACLC,MAAOtD,KAAKoB,MAAMuG,SAClB5E,SAAU/C,KAAK+C,WAElBD,EAAO6E,UACJ,yBAAK1H,UAAU,oBAAoB6C,EAAO6E,WAGlD,yBAAK1H,UAAU,cACX,2BACIV,KAAK,WACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO8E,kBAEzBlE,YAAY,mBACZL,KAAK,kBACLC,MAAOtD,KAAKoB,MAAMwG,gBAClB7E,SAAU/C,KAAK+C,WAElBD,EAAO8E,iBACJ,yBAAK3H,UAAU,oBACV6C,EAAO8E,kBAIpB,2BAAOrI,KAAK,SAASU,UAAU,yC,GAlHxCO,aAsIRC,gBAJS,SAAAW,GAAK,MAAK,CAC9B0B,OAAQ1B,EAAM0B,OACdX,SAAUf,EAAMe,YAEoB,CAAE2F,cjBvIb,SAACD,EAAS5I,GAAV,8CAAsB,WAAMC,GAAN,SAAAC,EAAA,+EAErCC,IAAMC,KAAK,sBAAuBwI,GAFG,OAG3C5I,EAAQK,KAAK,UACbJ,EAAS,CACLK,KLVc,aKWdC,QAAS,KAN8B,gDAS3CN,EAAS,CACLK,KLfc,aKgBdC,QAAS,KAAMC,SAASC,OAXe,yDAAtB,wDiBuIde,CAA4CgH,ICtIrDM,G,kDAEF,aAAe,IAAD,8BACV,gBAEK3G,MAAQ,CACTsG,SAAU,GACVC,SAAU,GACV7E,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBATN,E,sEAYY0C,GAClBA,EAAUd,SAASC,YACnBpC,KAAKF,MAAMb,QAAQK,KAAK,cAGxB2D,EAAUH,QACV9C,KAAKkD,SAAS,CACVJ,OAAQG,EAAUH,W,0CAMtB9C,KAAKF,MAAMqC,SAASC,YACpBpC,KAAKF,MAAMb,QAAQK,KAAK,gB,+BAIvB6D,GACLA,EAAEI,iBACF,IAAMyE,EAAe,CACjBN,SAAU1H,KAAKoB,MAAMsG,SACrBC,SAAU3H,KAAKoB,MAAMuG,UAGzB3H,KAAKF,MAAMmI,MAAMD,K,+BAGZ7E,GACLnD,KAAKkD,SAAL,eACKC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAMxB,IACER,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,yBAAK7C,UAAU,SACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,UACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO4E,WAEzBhE,YAAY,gBACZL,KAAK,WACLC,MAAOtD,KAAKoB,MAAMsG,SAClB3E,SAAU/C,KAAK+C,WAGfD,EAAO4E,UACH,yBAAKzH,UAAU,oBAAoB6C,EAAO4E,WAItD,yBAAKzH,UAAU,cACX,2BACIV,KAAK,WACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO6E,WAEzBjE,YAAY,WACZL,KAAK,WACLC,MAAOtD,KAAKoB,MAAMuG,SAClB5E,SAAU/C,KAAK+C,WAGfD,EAAO6E,UACH,yBAAK1H,UAAU,oBAAoB6C,EAAO6E,WAItD,2BACIpI,KAAK,SACLU,UAAU,yC,GA/F1BO,aAoHLC,gBALS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,SAChBW,OAAQ1B,EAAM0B,UAGsB,CAAEmF,MlBrGrB,SAAAD,GAAY,8CAAI,WAAM9I,GAAN,mBAAAC,EAAA,+EAGXC,IAAMC,KAAK,mBAAoB2I,GAHpB,OAGvB1G,EAHuB,OAKrBE,EAAUF,EAAI5B,KAAd8B,MAERK,aAAaqG,QAAQ,WAAY1G,GAEjCD,EAAYC,GAEN2G,EAAUC,IAAW5G,GAE3BtC,EAAS,CACLK,KLxBoB,mBKyBpBC,QAAS2I,IAfgB,kDAkB7BjJ,EAAS,CACLK,KLxCc,aKyCdC,QAAS,KAAMC,SAASC,OApBC,0DAAJ,wDkBqGlBe,CAAoCsH,I,SCnGpCtH,gBAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGL1B,EAlBM,SAAC,GAAD,IAAcD,EAAd,EAAG6H,UAAsBlG,EAAzB,EAAyBA,SAAamG,EAAtC,gDACjB,kBAAC,IAAD,iBAAWA,EAAX,CACIC,OAAQ,SAAAzI,GAAK,OAA4B,IAAxBqC,EAASC,WACtB,kBAAC5B,EAAcV,GAEX,kBAAC,IAAD,CAAUO,GAAG,iBCYvBmI,GAAW3G,aAAa2G,SAE9B,GAAIA,GAAU,CAEZjH,EAAYiH,IAEZ,IAAMC,GAAkBL,IAAWI,IAEnChE,EAAMtF,SAAS,CACbK,KzBpB4B,mByBqB5BC,QAASiJ,KAGX,IAAMC,GAAcC,KAAKC,MAAQ,IAE7BH,GAAgBI,IAAMH,KACxBlE,EAAMtF,SAAS0C,KACflB,OAAOsB,SAASC,KAAO,KAiCZ6G,OA7Bf,WACE,OACE,kBAAC,IAAD,CAAUtE,MAAOA,GACf,kBAAC,IAAD,KACE,yBAAKvE,UAAU,OACb,kBAAC,EAAD,MAIA,kBAAC,IAAD,CAAO8I,OAAK,EAACC,KAAK,IAAIX,UAAWb,KACjC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,YAAYX,UAAWZ,KACzC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,SAASX,UAAWN,KAItC,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAcgB,OAAK,EAACC,KAAK,aAAaX,UAAWtH,IACjD,kBAAC,GAAD,CAAcgI,OAAK,EAACC,KAAK,cAAcX,UAAW1F,IAClD,kBAAC,GAAD,CAAcoG,OAAK,EAACC,KAAK,qBAAqBX,UAAWrD,IACzD,kBAAC,GAAD,CAAc+D,OAAK,EAACC,KAAK,oBAAoBX,UAAW7B,KACxD,kBAAC,GAAD,CAAcuC,OAAK,EAACC,KAAK,sBAAsBX,UAAWvB,KAC1D,kBAAC,GAAD,CAAciC,OAAK,EAACC,KAAK,wCAAwCX,UAAWnB,UCpDpE+B,QACW,cAA7BvI,OAAOsB,SAASkH,UAEe,UAA7BxI,OAAOsB,SAASkH,UAEhBxI,OAAOsB,SAASkH,SAASjE,MACvB,2DCZNkE,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB7E,WACrBA,UAAU8E,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1891dc2.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS, GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"./types\";\n\nexport const createProject = (project, history) => async dispatch => {\n    try {\n        await axios.post(\"/api/project\", project);\n        history.push(\"/dashboard\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        })\n    }\n};\n\nexport const getProjects = () => async dispatch => {\n    const res = await axios.get(\"/api/project/all\");\n    dispatch({\n        type: GET_PROJECTS,\n        payload: res.data\n    });\n};\n\nexport const getProject = (id, history) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/project/${id}`)\n        dispatch({\n            type: GET_PROJECT,\n            payload: res.data\n        });\n    } catch (error) {\n        history.push(\"/dashboard\");\n    }\n}\n\nexport const deleteProject = id => async dispatch => {\n    if (window.confirm(\"Do you want to delete it?\")) {\n        await axios.delete(`/api/project/${id}`);\n        dispatch({\n            type: DELETE_PROJECT,\n            payload: id\n        })\n    }\n}","export const GET_ERRORS = \"GET_ERRORS\";\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\n\n// types for backlog actions\n\nexport const GET_BACKLOG = \"GET_BACKLOG\";\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\n\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteProject } from \"../../actions/projectActions\";\n\nclass ProjectItem extends Component {\n\n  onDelete = id => {\n    this.props.deleteProject(id);\n  }\n\n  render() {\n    const { project } = this.props;\n    return (\n      <div className=\"container\">\n        <div className=\"card card-body bg-light mb-3\">\n          <div className=\"row\">\n            <div className=\"col-2\">\n              <span className=\"mx-auto\">{project.projectIdentifier}</span>\n            </div>\n            <div className=\"col-lg-6 col-md-4 col-8\">\n              <h3>{project.projectName}</h3>\n              <p>{project.description}</p>\n            </div>\n            <div className=\"col-md-4 d-none d-lg-block\">\n              <ul className=\"list-group\">\n                <Link to={`/projectBoard/${project.projectIdentifier}`}>\n                  <li className=\"list-group-item board\">\n                    <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\n                  </li>\n                </Link>\n                <Link to={`/updateProject/${project.projectIdentifier}`}>\n                  <li className=\"list-group-item update\">\n                    <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\n                  </li>\n                </Link>\n                <li className=\"list-group-item delete\" onClick={this.onDelete.bind(this, project.projectIdentifier)}>\n                  <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nProjectItem.propTypes = {\n  deleteProject: PropTypes.func.isRequired\n}\n\nexport default connect(null, { deleteProject })(ProjectItem);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n            </Link>\n        </React.Fragment>\n    )\n}\n\nexport default CreateProjectButton;","import React, { Component } from \"react\";\nimport ProjectItem from \"./Project/ProjectItem\";\nimport CreateProjectButton from \"./Project/CreateProjectButton\";\nimport { connect } from \"react-redux\";\nimport { getProjects } from \"../actions/projectActions\";\nimport PropTypes from \"prop-types\";\n\nclass Dashboard extends Component {\n\n    componentDidMount() {\n        this.props.getProjects();\n    }\n\n    render() {\n\n        const { projects } = this.props.project\n\n        return (\n            <div className=\"projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            <br />\n                            <CreateProjectButton />\n                            <br />\n                            <hr />\n                            {projects.map(project => (\n                                <ProjectItem key={project.id} project={project} />\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    project: PropTypes.object.isRequired,\n    getProjects: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    project: state.project\n})\n\nexport default connect(mapStateToProps, { getProjects })(Dashboard);\n","import axios from \"axios\";\n\nconst setJWTToken = token => {\n    if (token) {\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        delete axios.defaults.headers.common[\"Authorization\"]\n    }\n}\n\nexport default setJWTToken;","import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createNewUser = (newUser, history) => async dispatch => {\n    try {\n        await axios.post(\"/api/users/register\", newUser);\n        history.push(\"/login\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        })\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        })\n    }\n}\n\nexport const login = LoginRequest => async dispatch => {\n    try {\n        // post action => login request\n        const res = await axios.post(\"/api/users/login\", LoginRequest);\n        // extract token from res.data\n        const { token } = res.data\n        // store token in localstorage\n        localStorage.setItem(\"jwtToken\", token);\n        // set token in header (important)\n        setJWTToken(token);\n        // decode token on react\n        const decoded = jwt_decode(token);\n        // dispatch to securityreducer\n        dispatch({\n            type: SET_CURRENT_USER,\n            payload: decoded\n        })\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        })\n    }\n}\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n\n    setJWTToken(false);\n\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n    })\n}","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../actions/securityActions\";\n\nclass Header extends Component {\n\n    logout() {\n        this.props.logout();\n        window.location.href = \"/\";\n    }\n\n    render() {\n\n        const { validToken, user } = this.props.security;\n\n        const userIsAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            Dashboard\n                    </Link>\n                    </li>\n                </ul>\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            <i className=\"fas fa-user-circle mr-1\"> {user.fullName}</i>\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/logout\" onClick={this.logout.bind(this)}>\n                            Logout\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        const userIsNotAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/register\">\n                            Sign Up\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/login\">\n                            Login\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        let headerLinks;\n\n        if (validToken && user) {\n            headerLinks = userIsAuthenticated;\n        } else {\n            headerLinks = userIsNotAuthenticated\n        }\n\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to=\"/\">\n                        Personal Project Management Tool\n                    </Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    {headerLinks}\n                </div>\n            </nav>\n        )\n    }\n}\n\nHeader.propTypes = {\n    logout: PropTypes.func.isRequired,\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security\n})\n\nexport default connect(mapStateToProps, { logout })(Header);","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createProject } from \"../../actions/projectActions\";\nimport classnames from \"classnames\";\n\nclass AddProject extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    // life cycle hooks\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n\n    onChange(e) {\n        this.setState(\n            {\n                [e.target.name]: e.target.value\n            }\n        );\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const newProject = {\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        };\n        this.props.createProject(newProject, this.props.history)\n    }\n\n    render() {\n        const { errors } = this.state\n        return (\n            <div>\n                <div className=\"project\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-8 m-auto\">\n                                <h5 className=\"display-4 text-center\">Create Project form</h5>\n                                <hr />\n                                <form onSubmit={this.onSubmit}>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"text\"\n                                            className={classnames(\"form-control form-control-lg\", {\n                                                \"is-invalid\": errors.projectName\n                                            })}\n                                            placeholder=\"Project Name\"\n                                            name=\"projectName\"\n                                            value={this.state.projectName}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.projectName && (\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                        )}\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"text\"\n                                            className={classnames(\"form-control form-control-lg\", {\n                                                \"is-invalid\": errors.projectIdentifier\n                                            })}\n                                            placeholder=\"Unique Project ID\"\n                                            name=\"projectIdentifier\"\n                                            value={this.state.projectIdentifier}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.projectIdentifier && (\n                                            <div className=\"invalid-feedback\">{errors.projectIdentifier}</div>\n                                        )}\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <textarea\n                                            className={classnames(\"form-control form-control-lg\", {\n                                                \"is-invalid\": errors.description\n                                            })}\n                                            placeholder=\"Project Description\"\n                                            name=\"description\"\n                                            value={this.state.description}\n                                            onChange={this.onChange}>\n                                        </textarea>\n                                        {errors.description && (\n                                            <div className=\"invalid-feedback\">{errors.description}</div>\n                                        )}\n                                    </div>\n                                    <h6>Start Date</h6>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control form-control-lg\"\n                                            name=\"start_date\"\n                                            value={this.state.start_date}\n                                            onChange={this.onChange}\n                                        />\n                                    </div>\n                                    <h6>Estimated End Date</h6>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control form-control-lg\"\n                                            name=\"end_date\"\n                                            value={this.state.end_date}\n                                            onChange={this.onChange}\n                                        />\n                                    </div>\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProject.propTypes = {\n    createProject: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, { createProject })(AddProject);","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload;\n\n        default:\n            return state\n    }\n}","import { GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects: action.payload\n            };\n\n        case GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            };\n\n        case DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(\n                    project => project.projectIdentifier !== action.payload\n                )\n            }\n\n        default:\n            return state\n    }\n}","import { GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from \"../actions/types\";\n\nconst initialState = {\n    project_tasks: [],\n    project_task: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n\n        case GET_BACKLOG:\n            return {\n                ...state,\n                project_tasks: action.payload\n            }\n\n        case GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            }\n\n        case DELETE_PROJECT_TASK:\n            return {\n                ...state,\n                project_tasks: state.project_tasks.filter(project => project.projectSequence !== action.payload)\n            }\n\n        default:\n            return state;\n    }\n}","import { SET_CURRENT_USER } from \"../actions/types\";\n\nconst initialState = {\n    user: {},\n    validToken: false\n}\n\nconst booleanActionPayload = (payload) => {\n    if (payload) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                validToken: booleanActionPayload(action.payload),\n                user: action.payload\n            }\n\n        default:\n            return state\n    }\n}","import { combineReducers } from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport backlogReducer from \"./backlogReducer\";\nimport securityReducer from \"./securityReducer\";\n\nexport default combineReducers({\n    errors: errorReducer,\n    project: projectReducer,\n    backlog: backlogReducer,\n    security: securityReducer\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {}\nconst middleware = [thunk]\n\nlet store;\n\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\n    store = createStore(rootReducer, initialState, compose(\n        applyMiddleware(...middleware),\n        ReactReduxDevTools\n    )\n    )\n} else {\n    store = createStore(rootReducer, initialState, compose(\n        applyMiddleware(...middleware))\n    )\n}\n\nexport default store;","import React, { Component } from \"react\";\nimport { getProject, createProject } from \"../../actions/projectActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass UpdateProject extends Component {\n    //set state\n    constructor() {\n        super();\n\n        this.state = {\n            id: \"\",\n            projectName: \"\",\n            projectIdentifier: null,\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n        const {\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date\n        } = nextProps.project;\n\n        this.setState({\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date\n        });\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const updateProject = {\n            id: this.state.id,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        };\n\n        this.props.createProject(updateProject, this.props.history);\n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project form</h5>\n                            <hr />\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.projectName\n                                        })}\n                                        placeholder=\"Project Name\"\n                                        name=\"projectName\"\n                                        value={this.state.projectName || \"\"}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.projectName && (\n                                        <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Unique Project ID\"\n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier || \"\"}\n                                        onChange={this.onChange}\n                                        disabled\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.description\n                                        })}\n                                        placeholder=\"Project Description\"\n                                        name=\"description\"\n                                        onChange={this.onChange}\n                                        value={this.state.description || \"\"}\n                                    />\n                                    {errors.description && (\n                                        <div className=\"invalid-feedback\">{errors.description}</div>\n                                    )}\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"start_date\"\n                                        value={this.state.start_date || \"\"}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"end_date\"\n                                        value={this.state.end_date || \"\"}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-primary btn-block mt-4\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    createProject: PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project.project,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { getProject, createProject }\n)(UpdateProject);\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { deleteProjectTask } from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nclass ProjectTask extends Component {\n\n    onDeleteClick(backlog_id, pt_id) {\n        this.props.deleteProjectTask(backlog_id, pt_id);\n    }\n\n    render() {\n        const { project_task } = this.props;\n        let priorityString;\n        let priorityClass;\n\n        if (project_task.priority === 1) {\n            priorityClass = \"bg-danger text-light\";\n            priorityString = \"HIGH\"\n        }\n\n        if (project_task.priority === 2) {\n            priorityClass = \"bg-warning text-light\";\n            priorityString = \"MEDIUM\"\n        }\n\n        if (project_task.priority === 3) {\n            priorityClass = \"bg-info text-light\";\n            priorityString = \"LOW\"\n        }\n\n        return (\n            <div className=\"card mb-1 bg-light\">\n                <div className={`card-header text-primary ${priorityClass}`}>\n                    ID: {project_task.projectSequence} -- Priority: {priorityString}\n                </div>\n\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{project_task.summary}</h5>\n                    <p className=\"card-text text-truncate \">\n                        {project_task.acceptanceCriteria}\n                    </p>\n                    <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`} className=\"btn btn-primary\">\n                        View / Update\n                    </Link>\n                    <button\n                        className=\"btn btn-danger ml-4\"\n                        onClick={this.onDeleteClick.bind(this, project_task.projectIdentifier, project_task.projectSequence)}>\n                        Delete\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nProjectTask.propTypes = {\n    deleteProjectTask: PropTypes.func.isRequired\n}\n\nexport default connect(null, { deleteProjectTask })(ProjectTask);\n","import axios from \"axios\";\nimport { GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from \"./types\";\n\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\n    try {\n        await axios.post(`/api/backlog/${backlog_id}`, project_task);\n\n        history.push(`/projectBoard/${backlog_id}`);\n\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }\n}\n\nexport const getBacklog = backlog_id => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\n        dispatch({\n            type: GET_BACKLOG,\n            payload: res.data\n        })\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }\n}\n\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: GET_PROJECT_TASK,\n            payload: res.data\n        })\n    } catch (error) {\n        history.push(\"/dashboard\");\n    }\n}\n\nexport const updateProjectTask = (backlog_id, pt_id, project_task, history) => async dispatch => {\n    try {\n        await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        })\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        })\n    }\n}\n\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\n    if (window.confirm(`Do you want to delete ${pt_id} project?`)) {\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: DELETE_PROJECT_TASK,\n            payload: pt_id\n        })\n    }\n}","import React, { Component } from 'react'\nimport ProjectTask from './ProjectTasks/ProjectTask'\n\nclass Backlog extends Component {\n    render() {\n        const { project_tasks } = this.props;\n\n        const tasks = project_tasks.map(project => (\n            <ProjectTask key={project.id} project_task={project} />\n        ));\n\n        let todoItems = [];\n\n        let inProgressItems = [];\n\n        let doneItems = [];\n\n        for (var i = 0; i < tasks.length; i++) {\n            if (tasks[i].props.project_task.status === \"TO_DO\") {\n                todoItems.push(tasks[i]);\n            }\n\n            if (tasks[i].props.project_task.status === \"IN_PROGRESS\") {\n                inProgressItems.push(tasks[i]);\n            }\n\n            if (tasks[i].props.project_task.status === \"DONE\") {\n                doneItems.push(tasks[i]);\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-secondary text-white\">\n                                <h3>TO DO</h3>\n                            </div>\n                        </div>\n                        {todoItems}\n                    </div>\n\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-primary text-white\">\n                                <h3>In Progress</h3>\n                            </div>\n                        </div>\n                        {inProgressItems}\n                    </div>\n\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-success text-white\">\n                                <h3>Done</h3>\n                            </div>\n                        </div>\n                        {doneItems}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Backlog;\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport Backlog from './Backlog';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../../actions/backlogActions\";\n\nclass ProjectBoard extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            errors: {}\n        }\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.getBacklog(id);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n        const { project_tasks } = this.props.backlog;\n        const { errors } = this.state;\n\n        let BoardContent;\n\n        const boardAlgo = (errors, project_tasks) => {\n            if (project_tasks.length < 1) {\n                if (errors.projectNotFound) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectNotFound}\n                        </div>\n                    )\n                } else if (errors.projectIdentifier) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectIdentifier}\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div className=\"alert alert-info text-center\" role=\"alert\">\n                            No project tasks on this board.\n                        </div>\n                    )\n                }\n            } else {\n                return <Backlog project_tasks={project_tasks} />\n            }\n        }\n\n        BoardContent = boardAlgo(errors, project_tasks);\n\n        return (\n            <div className=\"container\">\n                <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n                    <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n                </Link>\n                <br />\n                <hr />\n                {BoardContent}\n            </div>\n        )\n    }\n}\n\nProjectBoard.propTypes = {\n    backlog: PropTypes.object.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\n\nconst mapStateToProps = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, { getBacklog })(ProjectBoard);\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport { addProjectTask } from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\n\nclass AddProjectTask extends Component {\n    constructor(props) {\n        super(props);\n\n        const { id } = this.props.match.params;\n\n        this.state = {\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            priority: 0,\n            dueDate: null,\n            status: \"\",\n            projectIdentifier: id,\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n    }\n\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const newTask = {\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            status: this.state.status\n        };\n        this.props.addProjectTask(this.state.projectIdentifier, newTask, this.props.history);\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n        const { errors } = this.state\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\n                                Back to Project Board\n                    </Link>\n                            <h4 className=\"display-4 text-center\">Add Project Task</h4>\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.summary\n                                        })}\n                                        name=\"summary\"\n                                        placeholder=\"Project Task summary\"\n                                        value={this.state.summary || \"\"}\n                                        onChange={this.onChange} />\n                                    {errors.summary && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Acceptance Criteria\" name=\"acceptanceCriteria\"\n                                        value={this.state.acceptanceCriteria || \"\"}\n                                        onChange={this.onChange}></textarea>\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"dueDate\"\n                                        value={this.state.dueDate || \"\"}\n                                        onChange={this.onChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select\n                                        className=\"form-control form-control-lg\"\n                                        name=\"priority\"\n                                        value={this.state.priority || \"\"}\n                                        onChange={this.onChange}>\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select\n                                        className=\"form-control form-control-lg\"\n                                        name=\"status\"\n                                        value={this.state.status || \"\"}\n                                        onChange={this.onChange}>\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, { addProjectTask })(AddProjectTask);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport { getProjectTask, updateProjectTask } from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nclass UpdateProjectTask extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            priority: \"\",\n            dueDate: \"\",\n            projectIdentifier: \"\",\n            create_At: \"\",\n            update_At: \"\",\n            status: \"\",\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        const { backlog_id, pt_id } = this.props.match.params;\n        this.props.getProjectTask(backlog_id, pt_id, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n\n        const {\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At,\n            update_At,\n            status\n        } = nextProps.project_task;\n        this.setState({\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At,\n            update_At,\n            status\n        })\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const UpdateProjectTask = {\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            projectIdentifier: this.state.projectIdentifier,\n            create_At: this.state.create_At,\n            update_At: this.state.update_At,\n            status: this.state.status\n        }\n\n        this.props.updateProjectTask(this.state.projectIdentifier, this.state.projectSequence, UpdateProjectTask, this.props.history);\n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${this.state.projectIdentifier}`} className=\"btn btn-light\">\n                                Back to Project Board\n                            </Link>\n                            <h4 className=\"display-4 text-center\">Update Project Task</h4>\n                            <p className=\"lead text-center\">Project Name: {this.state.projectIdentifier} | Project Task ID: {this.state.projectSequence}</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.summary\n                                        })}\n                                        name=\"summary\"\n                                        placeholder=\"Project Task summary\"\n                                        value={this.state.summary || \"\"}\n                                        onChange={this.onChange}\n                                    />\n                                    {\n                                        errors.summary && (\n                                            <div className=\"invalid-feedback\">{errors.summary}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Acceptance Criteria\"\n                                        name=\"acceptanceCriteria\"\n                                        value={this.state.acceptanceCriteria || \"\"}\n                                        onChange={this.onChange}\n                                    ></textarea>\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"dueDate\"\n                                        value={this.state.dueDate || \"\"}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select\n                                        className=\"form-control form-control-lg\"\n                                        name=\"priority\"\n                                        value={this.state.priority || \"\"}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select\n                                        className=\"form-control form-control-lg\"\n                                        name=\"status\"\n                                        value={this.state.status || \"\"}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nUpdateProjectTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    updateProjectTask: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    project_task: state.backlog.project_task,\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, { getProjectTask, updateProjectTask })(UpdateProjectTask);","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass Landing extends Component {\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"landing\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">Personal Project Tool</h1>\n                                <p className=\"lead\">\n                                    Create your account to join active projects or start your own\n                                </p>\n                                <hr />\n                                <Link className=\"btn btn-lg btn-primary mr-2\" to=\"/register\">\n                                    Sign Up\n                                </Link>\n                                <Link to=\"/login\" className=\"btn btn-lg btn-secondary mr-2\">\n                                    Login\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLanding.propTypes = {\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security\n})\n\nexport default connect(mapStateToProps)(Landing);","import React, { Component } from \"react\";\nimport { createNewUser } from \"../../actions/securityActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass Register extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            username: \"\",\n            fullName: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const newUser = {\n            username: this.state.username,\n            fullName: this.state.fullName,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        };\n        this.props.createNewUser(newUser, this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.fullName\n                                        })}\n                                        placeholder=\"Full Name\"\n                                        name=\"fullName\"\n                                        value={this.state.fullName}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.fullName && (\n                                        <div className=\"invalid-feedback\">{errors.fullName}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.username\n                                        })}\n                                        placeholder=\"Email Address (Username)\"\n                                        name=\"username\"\n                                        value={this.state.username}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.username && (\n                                        <div className=\"invalid-feedback\">{errors.username}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"password\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.password\n                                        })}\n                                        placeholder=\"Password\"\n                                        name=\"password\"\n                                        value={this.state.password}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.password && (\n                                        <div className=\"invalid-feedback\">{errors.password}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"password\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.confirmPassword\n                                        })}\n                                        placeholder=\"Confirm Password\"\n                                        name=\"confirmPassword\"\n                                        value={this.state.confirmPassword}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.confirmPassword && (\n                                        <div className=\"invalid-feedback\">\n                                            {errors.confirmPassword}\n                                        </div>\n                                    )}\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nRegister.propTypes = {\n    createNewUser: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors,\n    security: state.security\n});\nexport default connect(mapStateToProps, { createNewUser })(Register);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { login } from \"../../actions/securityActions\";\n\nclass Login extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const LoginRequest = {\n            username: this.state.username,\n            password: this.state.password\n        }\n\n        this.props.login(LoginRequest);\n    }\n\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.username\n                                        })}\n                                        placeholder=\"Email Address\"\n                                        name=\"username\"\n                                        value={this.state.username}\n                                        onChange={this.onChange}\n                                    />\n                                    {\n                                        errors.username && (\n                                            <div className=\"invalid-feedback\">{errors.username}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"password\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.password\n                                        })}\n                                        placeholder=\"Password\"\n                                        name=\"password\"\n                                        value={this.state.password}\n                                        onChange={this.onChange}\n                                    />\n                                    {\n                                        errors.password && (\n                                            <div className=\"invalid-feedback\">{errors.password}</div>\n                                        )\n                                    }\n                                </div>\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    login: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security,\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, { login })(Login);\n","import React from 'react'\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\n    <Route {...otherProps}\n        render={props => security.validToken === true ? (\n            <Component {...props} />\n        ) : (\n                <Redirect to=\"login\" />)\n        }\n    />\n);\n\nSecuredRoute.propTypes = {\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security\n})\n\nexport default connect(mapStateToProps)(SecuredRoute)","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\nimport Header from \"./components/Layout/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AddProject from \"./components/Project/AddProject\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport UpdateProject from \"./components/Project/UpdateProject\";\nimport ProjectBoard from \"./components/ProjectBoard/ProjectBoard\";\nimport AddProjectTask from \"./components/ProjectBoard/ProjectTasks/AddProjectTask\";\nimport UpdateProjectTask from \"./components/ProjectBoard/ProjectTasks/UpdateProjectTask\";\nimport Landing from \"./components/Layout/Landing\";\nimport Register from \"./components/UserManagement/Register\";\nimport Login from \"./components/UserManagement/Login\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"./securityUtils/setJWTToken\";\nimport { SET_CURRENT_USER } from \"./actions/types\";\nimport { logout } from \"./actions/securityActions\";\nimport SecuredRoute from \"./securityUtils/SecuredRoute\";\n\nconst jwtToken = localStorage.jwtToken;\n\nif (jwtToken) {\n\n  setJWTToken(jwtToken);\n\n  const decode_jwtToken = jwt_decode(jwtToken);\n\n  store.dispatch({\n    type: SET_CURRENT_USER,\n    payload: decode_jwtToken\n  });\n\n  const currentTime = Date.now() / 1000;\n\n  if (decode_jwtToken.exp < currentTime) {\n    store.dispatch(logout());\n    window.location.href = \"/\";\n  }\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <Header />\n          {\n            // public routes\n          }\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/login\" component={Login} />\n          {\n            // private route\n          }\n          <Switch>\n            <SecuredRoute exact path=\"/dashboard\" component={Dashboard} />\n            <SecuredRoute exact path=\"/addProject\" component={AddProject} />\n            <SecuredRoute exact path=\"/updateProject/:id\" component={UpdateProject} />\n            <SecuredRoute exact path=\"/projectBoard/:id\" component={ProjectBoard} />\n            <SecuredRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask} />\n            <SecuredRoute exact path=\"/updateProjectTask/:backlog_id/:pt_id\" component={UpdateProjectTask} />\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}